create or replace procedure ad_stp_cab_gerarnotatransf_sf(p_codusu    pls_integer,
                                                          p_idsessao  varchar2,
                                                          p_qtdlinhas pls_integer,
                                                          p_mensagem  out nocopy varchar2) as
  notas ad_type_of_number := ad_type_of_number();

  top  tgftop%rowtype;
  cab  tgfcab%rowtype;
  ite  tgfite%rowtype;
  link varchar2(1000);
begin

  /*
  * Autor: M. Rangel
  * Processo: Armazém
  * Objetivo: Gerar notas de transferências a partir de outras notas
  */

  cab.codempnegoc := act_txt_param(p_idsessao, 'CODEMPNEGOC');
  cab.codparc     := act_txt_param(p_idsessao, 'CODPARC');
  cab.codtipoper  := act_txt_param(p_idsessao, 'CODTIPOPER');
  cab.codnat      := act_txt_param(p_idsessao, 'CODNAT');
  cab.codcencus   := act_txt_param(p_idsessao, 'CODCENCUS');
  cab.codproj     := act_txt_param(p_idsessao, 'CODPROJ');
  cab.serienota   := act_int_param(p_idsessao, 'SERIENOTA');

  /*
  cab.codempnegoc := '3';
  cab.codparc     := '15589';
  cab.codtipoper  := '217';
  cab.codnat      := '2010000';
  cab.codcencus   := '20200100';
  cab.codproj     := '0';
  cab.serienota   := '2';*/
  cab.codvend := 103;

  select *
    into top
    from tgftop
   where codtipoper = cab.codtipoper
     and dhalter = ad_get.maxdhtipoper(cab.codtipoper);

  cab.tipmov    := top.tipmov;
  cab.dhtipoper := top.dhalter;

  /*  if p_qtdlinhas = 1 then
    p_mensagem := 'Selecione mais de uma nota!';
    return;
  end if;*/

  for i in 1 .. p_qtdlinhas
  loop
    notas.extend;
    notas(notas.last) := act_int_field(p_idsessao, i, 'NUNOTA');
  
    -- valida se notas confirmadas
    for conf in (select statusnota
                   from tgfcab
                  where nunota = notas(notas.last)
                    and statusnota != 'L')
    loop
      p_mensagem := 'A nota ' || notas(notas.last) || ' não está confirmada!';
      return;
    end loop;
  
    -- valida itens pendentes  
    for pend in (select 1
                   from tgfite
                  where nunota = notas(notas.last)
                    and sequencia = 1
                    and qtdneg - qtdentregue > 0)
    loop
      ite.pendente := 'S';
    end loop;
  
    if ite.pendente is null then
      p_mensagem := 'Não existem produtos pendentes nas notas selecionadas!';
      return;
    end if;
  
  end loop;

  -- insere o cabeçalho
  begin
  
    begin
      select codempnegoc
        into cab.codemp
        from tgfcab
       where nunota in (select column_value
                          from table(cast(notas as ad_type_of_number)))
       group by codempnegoc;
    exception
      when too_many_rows then
        raise_application_error(-20105, 'Erro! Existem mais de 1 empresa de origem.');
      when others then
        raise;
    end;
  
    -- nunota
    stp_keygen_tgfnum(p_arquivo => 'TGFCAB', p_codemp => 1, p_tabela => 'TGFCAB', p_campo => 'NUNOTA', p_dsync => 0,
                      p_ultcod => cab.nunota);
  
    savepoint before_insert_cab;
    begin
      insert into tgfcab
        (nunota, codemp, codempnegoc, codparc, codparcdest, codtipoper, dhtipoper, tipmov, codnat, codcencus, codproj,
         serienota, codvend, dtneg, dtfatur, dtentsai, dtmov, vlrnota, numnota, codtipvenda, dhtipvenda, tipfrete,
         cif_fob, qtdvol, pendente, statusnota, rateado, codusu, ad_tela, dtalter)
      values
        (cab.nunota, cab.codemp, cab.codempnegoc, cab.codparc, cab.codparc, cab.codtipoper, top.dhalter, top.tipmov,
         cab.codnat, cab.codcencus, cab.codproj, cab.serienota, cab.codvend, trunc(sysdate), trunc(sysdate),
         trunc(sysdate), sysdate, 0, 0, 0, ad_get.maxdhtipvenda(0), 'N', 'F', 0, 'S', 'A', 'N', p_codusu,
         'AcaoGeraNotaTransf', sysdate);
    exception
      when others then
        rollback to before_insert_cab;
        raise_application_error(-20105, 'Erro! insert da cab - ' || sqlerrm);
    end;
  
    dbms_output.put_line(cab.nunota);
  
  end;

  -- insere os itens
  begin
  
    for l in (select sequencia, atualestoque, codprod, codlocalorig, codvol, usoprod, sum(qtdneg) qtdneg,
                     sum(vlrtot) vlrtot
                from tgfite i
               where 1 = 1
                 and qtdneg - qtdentregue > 0
                 and i.nunota in (select column_value
                                    from table(cast(notas as ad_type_of_number)))
               group by sequencia, atualestoque, codprod, codlocalorig, codvol, usoprod)
    loop
      begin
      
        -- empresa
        ite.codemp := case
                        when l.atualestoque * -1 = 1 then
                         cab.codempnegoc
                        else
                         cab.codemp
                      end;
      
        -- CFOP              
        if ad_get.ufparcemp(cab.codparc, 'P') = ad_get.ufparcemp(cab.codemp, 'E') then
          if l.atualestoque = 1 then
            ite.codcfo := top.codcfo_saida;
          else
            ite.codcfo := top.codcfo_entrada;
          end if;
        else
          if l.atualestoque = 1 then
            ite.codcfo := top.codcfo_saida_fora;
          else
            ite.codcfo := top.codcfo_entrada_fora;
          end if;
        end if;
      
        -- insere item
        insert into tgfite
          (nunota, sequencia, codemp, codprod, qtdneg, vlrunit, vlrtot, atualestoque, codvol, usoprod, controle,
           codlocalorig, codcfo, codtrib)
        values
          (cab.nunota, l.sequencia, ite.codemp, l.codprod, l.qtdneg, round(l.vlrtot / l.qtdneg, 6), l.vlrtot,
           (l.atualestoque * -1), l.codvol, l.usoprod, ' ', l.codlocalorig, ite.codcfo, 41);
      
      exception
        when others then
          rollback to before_insert_cab;
          raise;
      end;
    end loop;
  
  end;

  --- cria o relacionamento com a VAR
  begin
    for v in (select c.nunota, c.numnota, i.sequencia, i.codprod, sum(i.qtdneg) qtdneg
                from tgfcab c
                join tgfite i
                  on i.nunota = c.nunota
                 and i.sequencia > 0
               where c.nunota in (select column_value
                                    from table(cast(notas as ad_type_of_number)))
               group by c.nunota, c.numnota, i.sequencia, i.codprod)
    loop
      begin
      
        if cab.observacao is null then
          cab.observacao := v.numnota;
        else
          cab.observacao := cab.observacao || ', ' || v.numnota;
        end if;
      
        insert into tgfvar
          (nunota, sequencia, nunotaorig, sequenciaorig, qtdatendida)
        values
          (cab.nunota, 1, v.nunota, v.sequencia, v.qtdneg);
      exception
        when others then
          raise;
      end;
    end loop;
  end;

  -- atualiza o cabeçalho
  begin
    for ite in (select sum(vlrtot) vlrnota, sum(qtdneg) qtdvol
                  from tgfite
                 where nunota = cab.nunota
                   and sequencia > 0)
    loop
      begin
        update tgfcab
           set vlrnota    = round(ite.vlrnota, 2),
               qtdvol     = ite.qtdvol,
               peso       = ite.qtdvol,
               pesobruto  = ite.qtdvol,
               codmoddoc  = 1,
               observacao = 'Ref. Notas: ' || cab.observacao
         where nunota = cab.nunota;
      exception
        when others then
          raise;
      end;
    end loop;
  end;

  link := ad_fnc_urlskw(p_tabela => 'TGFCAB', p_nuchave => cab.nunota, p_nomedet => null, p_iditem => null);

  p_mensagem := 'Nota Gerada com sucesso! Nro Único ' || '<a title="Clique para visualizar a nota" ' ||
                'target="_parent" href=' || link || '>' || cab.nunota || '</a>';

end;
/
